'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("DS_HT_NGAY_TRONG_TUAN"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DS_HT_NGAY_TRONG_TUAN
    Inherits System.Data.DataSet
    
    Private tableHT_NGAY_TRONG_TUAN As HT_NGAY_TRONG_TUANDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("HT_NGAY_TRONG_TUAN")) Is Nothing) Then
                MyBase.Tables.Add(New HT_NGAY_TRONG_TUANDataTable(ds.Tables("HT_NGAY_TRONG_TUAN")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property HT_NGAY_TRONG_TUAN() As HT_NGAY_TRONG_TUANDataTable
        Get
            Return Me.tableHT_NGAY_TRONG_TUAN
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As DS_HT_NGAY_TRONG_TUAN = CType(MyBase.Clone,DS_HT_NGAY_TRONG_TUAN)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("HT_NGAY_TRONG_TUAN")) Is Nothing) Then
                MyBase.Tables.Add(New HT_NGAY_TRONG_TUANDataTable(ds.Tables("HT_NGAY_TRONG_TUAN")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableHT_NGAY_TRONG_TUAN = CType(MyBase.Tables("HT_NGAY_TRONG_TUAN"),HT_NGAY_TRONG_TUANDataTable)
        If (initTable = true) Then
            If (Not (Me.tableHT_NGAY_TRONG_TUAN) Is Nothing) Then
                Me.tableHT_NGAY_TRONG_TUAN.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DS_HT_NGAY_TRONG_TUAN"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DS_HT_NGAY_TRONG_TUAN.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableHT_NGAY_TRONG_TUAN = New HT_NGAY_TRONG_TUANDataTable
        MyBase.Tables.Add(Me.tableHT_NGAY_TRONG_TUAN)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeHT_NGAY_TRONG_TUAN() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DS_HT_NGAY_TRONG_TUAN = New DS_HT_NGAY_TRONG_TUAN
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub HT_NGAY_TRONG_TUANRowChangeEventHandler(ByVal sender As Object, ByVal e As HT_NGAY_TRONG_TUANRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class HT_NGAY_TRONG_TUANDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As System.Data.DataColumn
        
        Private columnMa As System.Data.DataColumn
        
        Private columnNGAY_TRONG_TUAN As System.Data.DataColumn
        
        Private columnSTT_NGAY As System.Data.DataColumn
        
        Private columnNGAY_LAM_VIEC_YN As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "HT_NGAY_TRONG_TUAN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaColumn() As System.Data.DataColumn
            Get
                Return Me.columnMa
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NGAY_TRONG_TUANColumn() As System.Data.DataColumn
            Get
                Return Me.columnNGAY_TRONG_TUAN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STT_NGAYColumn() As System.Data.DataColumn
            Get
                Return Me.columnSTT_NGAY
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NGAY_LAM_VIEC_YNColumn() As System.Data.DataColumn
            Get
                Return Me.columnNGAY_LAM_VIEC_YN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As HT_NGAY_TRONG_TUANRow
            Get
                Return CType(Me.Rows(index),HT_NGAY_TRONG_TUANRow)
            End Get
        End Property
        
        Public Event HT_NGAY_TRONG_TUANRowChanging As HT_NGAY_TRONG_TUANRowChangeEventHandler
        
        Public Event HT_NGAY_TRONG_TUANRowChanged As HT_NGAY_TRONG_TUANRowChangeEventHandler
        
        Public Event HT_NGAY_TRONG_TUANRowDeleting As HT_NGAY_TRONG_TUANRowChangeEventHandler
        
        Public Event HT_NGAY_TRONG_TUANRowDeleted As HT_NGAY_TRONG_TUANRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddHT_NGAY_TRONG_TUANRow(ByVal row As HT_NGAY_TRONG_TUANRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddHT_NGAY_TRONG_TUANRow(ByVal ID As Decimal, ByVal Ma As String, ByVal NGAY_TRONG_TUAN As String, ByVal STT_NGAY As Decimal, ByVal NGAY_LAM_VIEC_YN As String) As HT_NGAY_TRONG_TUANRow
            Dim rowHT_NGAY_TRONG_TUANRow As HT_NGAY_TRONG_TUANRow = CType(Me.NewRow,HT_NGAY_TRONG_TUANRow)
            rowHT_NGAY_TRONG_TUANRow.ItemArray = New Object() {ID, Ma, NGAY_TRONG_TUAN, STT_NGAY, NGAY_LAM_VIEC_YN}
            Me.Rows.Add(rowHT_NGAY_TRONG_TUANRow)
            Return rowHT_NGAY_TRONG_TUANRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Decimal) As HT_NGAY_TRONG_TUANRow
            Return CType(Me.Rows.Find(New Object() {ID}),HT_NGAY_TRONG_TUANRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As HT_NGAY_TRONG_TUANDataTable = CType(MyBase.Clone,HT_NGAY_TRONG_TUANDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New HT_NGAY_TRONG_TUANDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnMa = MyBase.Columns("Ma")
            Me.columnNGAY_TRONG_TUAN = MyBase.Columns("NGAY_TRONG_TUAN")
            Me.columnSTT_NGAY = MyBase.Columns("STT_NGAY")
            Me.columnNGAY_LAM_VIEC_YN = MyBase.Columns("NGAY_LAM_VIEC_YN")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New System.Data.DataColumn("ID", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnMa = New System.Data.DataColumn("Ma", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMa)
            Me.columnNGAY_TRONG_TUAN = New System.Data.DataColumn("NGAY_TRONG_TUAN", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNGAY_TRONG_TUAN)
            Me.columnSTT_NGAY = New System.Data.DataColumn("STT_NGAY", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTT_NGAY)
            Me.columnNGAY_LAM_VIEC_YN = New System.Data.DataColumn("NGAY_LAM_VIEC_YN", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNGAY_LAM_VIEC_YN)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnMa.AllowDBNull = false
            Me.columnNGAY_TRONG_TUAN.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewHT_NGAY_TRONG_TUANRow() As HT_NGAY_TRONG_TUANRow
            Return CType(Me.NewRow,HT_NGAY_TRONG_TUANRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New HT_NGAY_TRONG_TUANRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(HT_NGAY_TRONG_TUANRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HT_NGAY_TRONG_TUANRowChangedEvent) Is Nothing) Then
                RaiseEvent HT_NGAY_TRONG_TUANRowChanged(Me, New HT_NGAY_TRONG_TUANRowChangeEvent(CType(e.Row,HT_NGAY_TRONG_TUANRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HT_NGAY_TRONG_TUANRowChangingEvent) Is Nothing) Then
                RaiseEvent HT_NGAY_TRONG_TUANRowChanging(Me, New HT_NGAY_TRONG_TUANRowChangeEvent(CType(e.Row,HT_NGAY_TRONG_TUANRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HT_NGAY_TRONG_TUANRowDeletedEvent) Is Nothing) Then
                RaiseEvent HT_NGAY_TRONG_TUANRowDeleted(Me, New HT_NGAY_TRONG_TUANRowChangeEvent(CType(e.Row,HT_NGAY_TRONG_TUANRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HT_NGAY_TRONG_TUANRowDeletingEvent) Is Nothing) Then
                RaiseEvent HT_NGAY_TRONG_TUANRowDeleting(Me, New HT_NGAY_TRONG_TUANRowChangeEvent(CType(e.Row,HT_NGAY_TRONG_TUANRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveHT_NGAY_TRONG_TUANRow(ByVal row As HT_NGAY_TRONG_TUANRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_HT_NGAY_TRONG_TUAN = New DS_HT_NGAY_TRONG_TUAN
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "HT_NGAY_TRONG_TUANDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class HT_NGAY_TRONG_TUANRow
        Inherits System.Data.DataRow
        
        Private tableHT_NGAY_TRONG_TUAN As HT_NGAY_TRONG_TUANDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableHT_NGAY_TRONG_TUAN = CType(Me.Table,HT_NGAY_TRONG_TUANDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Decimal
            Get
                Return CType(Me(Me.tableHT_NGAY_TRONG_TUAN.IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableHT_NGAY_TRONG_TUAN.IDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ma() As String
            Get
                Return CType(Me(Me.tableHT_NGAY_TRONG_TUAN.MaColumn),String)
            End Get
            Set
                Me(Me.tableHT_NGAY_TRONG_TUAN.MaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NGAY_TRONG_TUAN() As String
            Get
                Return CType(Me(Me.tableHT_NGAY_TRONG_TUAN.NGAY_TRONG_TUANColumn),String)
            End Get
            Set
                Me(Me.tableHT_NGAY_TRONG_TUAN.NGAY_TRONG_TUANColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STT_NGAY() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableHT_NGAY_TRONG_TUAN.STT_NGAYColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'STT_NGAY' in table 'HT_NGAY_TRONG_TUAN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHT_NGAY_TRONG_TUAN.STT_NGAYColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NGAY_LAM_VIEC_YN() As String
            Get
                Try 
                    Return CType(Me(Me.tableHT_NGAY_TRONG_TUAN.NGAY_LAM_VIEC_YNColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'NGAY_LAM_VIEC_YN' in table 'HT_NGAY_TRONG_TUAN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHT_NGAY_TRONG_TUAN.NGAY_LAM_VIEC_YNColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTT_NGAYNull() As Boolean
            Return Me.IsNull(Me.tableHT_NGAY_TRONG_TUAN.STT_NGAYColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTT_NGAYNull()
            Me(Me.tableHT_NGAY_TRONG_TUAN.STT_NGAYColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNGAY_LAM_VIEC_YNNull() As Boolean
            Return Me.IsNull(Me.tableHT_NGAY_TRONG_TUAN.NGAY_LAM_VIEC_YNColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNGAY_LAM_VIEC_YNNull()
            Me(Me.tableHT_NGAY_TRONG_TUAN.NGAY_LAM_VIEC_YNColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class HT_NGAY_TRONG_TUANRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As HT_NGAY_TRONG_TUANRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As HT_NGAY_TRONG_TUANRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As HT_NGAY_TRONG_TUANRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
