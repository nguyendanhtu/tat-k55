//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SaleDS {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DS_DM_CATEGORY")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DS_DM_CATEGORY : global::System.Data.DataSet {
        
        private DM_CATEGORYDataTable tableDM_CATEGORY;
        
        private global::System.Data.DataRelation relationFK_DM_CATEGORY_DM_CATEGORY;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DS_DM_CATEGORY() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DS_DM_CATEGORY(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DM_CATEGORY"] != null)) {
                    base.Tables.Add(new DM_CATEGORYDataTable(ds.Tables["DM_CATEGORY"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DM_CATEGORYDataTable DM_CATEGORY {
            get {
                return this.tableDM_CATEGORY;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DS_DM_CATEGORY cln = ((DS_DM_CATEGORY)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DM_CATEGORY"] != null)) {
                    base.Tables.Add(new DM_CATEGORYDataTable(ds.Tables["DM_CATEGORY"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDM_CATEGORY = ((DM_CATEGORYDataTable)(base.Tables["DM_CATEGORY"]));
            if ((initTable == true)) {
                if ((this.tableDM_CATEGORY != null)) {
                    this.tableDM_CATEGORY.InitVars();
                }
            }
            this.relationFK_DM_CATEGORY_DM_CATEGORY = this.Relations["FK_DM_CATEGORY_DM_CATEGORY"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DS_DM_CATEGORY";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DS_DM_CATEGORY.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDM_CATEGORY = new DM_CATEGORYDataTable();
            base.Tables.Add(this.tableDM_CATEGORY);
            this.relationFK_DM_CATEGORY_DM_CATEGORY = new global::System.Data.DataRelation("FK_DM_CATEGORY_DM_CATEGORY", new global::System.Data.DataColumn[] {
                        this.tableDM_CATEGORY.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableDM_CATEGORY.CATEGORY_PARENT_IDColumn}, false);
            this.Relations.Add(this.relationFK_DM_CATEGORY_DM_CATEGORY);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDM_CATEGORY() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DS_DM_CATEGORY ds = new DS_DM_CATEGORY();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DM_CATEGORYRowChangeEventHandler(object sender, DM_CATEGORYRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DM_CATEGORYDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnCATEGORY_CODE;
            
            private global::System.Data.DataColumn columnCATEGORY_NAME;
            
            private global::System.Data.DataColumn columnCATEGORY_PARENT_ID;
            
            private global::System.Data.DataColumn columnDISPLAY_ORDER;
            
            private global::System.Data.DataColumn columnDISPLAY_LEVEL;
            
            private global::System.Data.DataColumn columnCATEGORY_DESCRIPTION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DM_CATEGORYDataTable() {
                this.TableName = "DM_CATEGORY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DM_CATEGORYDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DM_CATEGORYDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CATEGORY_CODEColumn {
                get {
                    return this.columnCATEGORY_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CATEGORY_NAMEColumn {
                get {
                    return this.columnCATEGORY_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CATEGORY_PARENT_IDColumn {
                get {
                    return this.columnCATEGORY_PARENT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DISPLAY_ORDERColumn {
                get {
                    return this.columnDISPLAY_ORDER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DISPLAY_LEVELColumn {
                get {
                    return this.columnDISPLAY_LEVEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CATEGORY_DESCRIPTIONColumn {
                get {
                    return this.columnCATEGORY_DESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DM_CATEGORYRow this[int index] {
                get {
                    return ((DM_CATEGORYRow)(this.Rows[index]));
                }
            }
            
            public event DM_CATEGORYRowChangeEventHandler DM_CATEGORYRowChanging;
            
            public event DM_CATEGORYRowChangeEventHandler DM_CATEGORYRowChanged;
            
            public event DM_CATEGORYRowChangeEventHandler DM_CATEGORYRowDeleting;
            
            public event DM_CATEGORYRowChangeEventHandler DM_CATEGORYRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDM_CATEGORYRow(DM_CATEGORYRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DM_CATEGORYRow AddDM_CATEGORYRow(string CATEGORY_CODE, string CATEGORY_NAME, DM_CATEGORYRow parentDM_CATEGORYRowByFK_DM_CATEGORY_DM_CATEGORY, decimal DISPLAY_ORDER, decimal DISPLAY_LEVEL, string CATEGORY_DESCRIPTION) {
                DM_CATEGORYRow rowDM_CATEGORYRow = ((DM_CATEGORYRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CATEGORY_CODE,
                        CATEGORY_NAME,
                        null,
                        DISPLAY_ORDER,
                        DISPLAY_LEVEL,
                        CATEGORY_DESCRIPTION};
                if ((parentDM_CATEGORYRowByFK_DM_CATEGORY_DM_CATEGORY != null)) {
                    columnValuesArray[3] = parentDM_CATEGORYRowByFK_DM_CATEGORY_DM_CATEGORY[0];
                }
                rowDM_CATEGORYRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDM_CATEGORYRow);
                return rowDM_CATEGORYRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DM_CATEGORYRow FindByID(decimal ID) {
                return ((DM_CATEGORYRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DM_CATEGORYDataTable cln = ((DM_CATEGORYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DM_CATEGORYDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnCATEGORY_CODE = base.Columns["CATEGORY_CODE"];
                this.columnCATEGORY_NAME = base.Columns["CATEGORY_NAME"];
                this.columnCATEGORY_PARENT_ID = base.Columns["CATEGORY_PARENT_ID"];
                this.columnDISPLAY_ORDER = base.Columns["DISPLAY_ORDER"];
                this.columnDISPLAY_LEVEL = base.Columns["DISPLAY_LEVEL"];
                this.columnCATEGORY_DESCRIPTION = base.Columns["CATEGORY_DESCRIPTION"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCATEGORY_CODE = new global::System.Data.DataColumn("CATEGORY_CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORY_CODE);
                this.columnCATEGORY_NAME = new global::System.Data.DataColumn("CATEGORY_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORY_NAME);
                this.columnCATEGORY_PARENT_ID = new global::System.Data.DataColumn("CATEGORY_PARENT_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORY_PARENT_ID);
                this.columnDISPLAY_ORDER = new global::System.Data.DataColumn("DISPLAY_ORDER", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISPLAY_ORDER);
                this.columnDISPLAY_LEVEL = new global::System.Data.DataColumn("DISPLAY_LEVEL", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISPLAY_LEVEL);
                this.columnCATEGORY_DESCRIPTION = new global::System.Data.DataColumn("CATEGORY_DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORY_DESCRIPTION);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnCATEGORY_CODE.AllowDBNull = false;
                this.columnCATEGORY_CODE.MaxLength = 50;
                this.columnCATEGORY_NAME.AllowDBNull = false;
                this.columnCATEGORY_NAME.MaxLength = 250;
                this.columnCATEGORY_DESCRIPTION.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DM_CATEGORYRow NewDM_CATEGORYRow() {
                return ((DM_CATEGORYRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DM_CATEGORYRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DM_CATEGORYRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DM_CATEGORYRowChanged != null)) {
                    this.DM_CATEGORYRowChanged(this, new DM_CATEGORYRowChangeEvent(((DM_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DM_CATEGORYRowChanging != null)) {
                    this.DM_CATEGORYRowChanging(this, new DM_CATEGORYRowChangeEvent(((DM_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DM_CATEGORYRowDeleted != null)) {
                    this.DM_CATEGORYRowDeleted(this, new DM_CATEGORYRowChangeEvent(((DM_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DM_CATEGORYRowDeleting != null)) {
                    this.DM_CATEGORYRowDeleting(this, new DM_CATEGORYRowChangeEvent(((DM_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDM_CATEGORYRow(DM_CATEGORYRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DS_DM_CATEGORY ds = new DS_DM_CATEGORY();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DM_CATEGORYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DM_CATEGORYRow : global::System.Data.DataRow {
            
            private DM_CATEGORYDataTable tableDM_CATEGORY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DM_CATEGORYRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDM_CATEGORY = ((DM_CATEGORYDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ID {
                get {
                    return ((decimal)(this[this.tableDM_CATEGORY.IDColumn]));
                }
                set {
                    this[this.tableDM_CATEGORY.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CATEGORY_CODE {
                get {
                    return ((string)(this[this.tableDM_CATEGORY.CATEGORY_CODEColumn]));
                }
                set {
                    this[this.tableDM_CATEGORY.CATEGORY_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CATEGORY_NAME {
                get {
                    return ((string)(this[this.tableDM_CATEGORY.CATEGORY_NAMEColumn]));
                }
                set {
                    this[this.tableDM_CATEGORY.CATEGORY_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CATEGORY_PARENT_ID {
                get {
                    try {
                        return ((decimal)(this[this.tableDM_CATEGORY.CATEGORY_PARENT_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATEGORY_PARENT_ID\' in table \'DM_CATEGORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDM_CATEGORY.CATEGORY_PARENT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DISPLAY_ORDER {
                get {
                    try {
                        return ((decimal)(this[this.tableDM_CATEGORY.DISPLAY_ORDERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DISPLAY_ORDER\' in table \'DM_CATEGORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDM_CATEGORY.DISPLAY_ORDERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DISPLAY_LEVEL {
                get {
                    try {
                        return ((decimal)(this[this.tableDM_CATEGORY.DISPLAY_LEVELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DISPLAY_LEVEL\' in table \'DM_CATEGORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDM_CATEGORY.DISPLAY_LEVELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CATEGORY_DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableDM_CATEGORY.CATEGORY_DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATEGORY_DESCRIPTION\' in table \'DM_CATEGORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDM_CATEGORY.CATEGORY_DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DM_CATEGORYRow DM_CATEGORYRowParent {
                get {
                    return ((DM_CATEGORYRow)(this.GetParentRow(this.Table.ParentRelations["FK_DM_CATEGORY_DM_CATEGORY"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_DM_CATEGORY_DM_CATEGORY"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCATEGORY_PARENT_IDNull() {
                return this.IsNull(this.tableDM_CATEGORY.CATEGORY_PARENT_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCATEGORY_PARENT_IDNull() {
                this[this.tableDM_CATEGORY.CATEGORY_PARENT_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDISPLAY_ORDERNull() {
                return this.IsNull(this.tableDM_CATEGORY.DISPLAY_ORDERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDISPLAY_ORDERNull() {
                this[this.tableDM_CATEGORY.DISPLAY_ORDERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDISPLAY_LEVELNull() {
                return this.IsNull(this.tableDM_CATEGORY.DISPLAY_LEVELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDISPLAY_LEVELNull() {
                this[this.tableDM_CATEGORY.DISPLAY_LEVELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCATEGORY_DESCRIPTIONNull() {
                return this.IsNull(this.tableDM_CATEGORY.CATEGORY_DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCATEGORY_DESCRIPTIONNull() {
                this[this.tableDM_CATEGORY.CATEGORY_DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DM_CATEGORYRow[] GetDM_CATEGORYRows() {
                if ((this.Table.ChildRelations["FK_DM_CATEGORY_DM_CATEGORY"] == null)) {
                    return new DM_CATEGORYRow[0];
                }
                else {
                    return ((DM_CATEGORYRow[])(base.GetChildRows(this.Table.ChildRelations["FK_DM_CATEGORY_DM_CATEGORY"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DM_CATEGORYRowChangeEvent : global::System.EventArgs {
            
            private DM_CATEGORYRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DM_CATEGORYRowChangeEvent(DM_CATEGORYRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DM_CATEGORYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace SaleDS.DS_DM_CATEGORYTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DM_CATEGORYTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DM_CATEGORYTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DM_CATEGORY";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("CATEGORY_CODE", "CATEGORY_CODE");
            tableMapping.ColumnMappings.Add("CATEGORY_NAME", "CATEGORY_NAME");
            tableMapping.ColumnMappings.Add("CATEGORY_PARENT_ID", "CATEGORY_PARENT_ID");
            tableMapping.ColumnMappings.Add("DISPLAY_ORDER", "DISPLAY_ORDER");
            tableMapping.ColumnMappings.Add("DISPLAY_LEVEL", "DISPLAY_LEVEL");
            tableMapping.ColumnMappings.Add("CATEGORY_DESCRIPTION", "CATEGORY_DESCRIPTION");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[DM_CATEGORY] WHERE (([ID] = @Original_ID) AND ([CATEGORY_CODE] = @Original_CATEGORY_CODE) AND ([CATEGORY_NAME] = @Original_CATEGORY_NAME) AND ((@IsNull_CATEGORY_PARENT_ID = 1 AND [CATEGORY_PARENT_ID] IS NULL) OR ([CATEGORY_PARENT_ID] = @Original_CATEGORY_PARENT_ID)) AND ((@IsNull_DISPLAY_ORDER = 1 AND [DISPLAY_ORDER] IS NULL) OR ([DISPLAY_ORDER] = @Original_DISPLAY_ORDER)) AND ((@IsNull_DISPLAY_LEVEL = 1 AND [DISPLAY_LEVEL] IS NULL) OR ([DISPLAY_LEVEL] = @Original_DISPLAY_LEVEL)) AND ((@IsNull_CATEGORY_DESCRIPTION = 1 AND [CATEGORY_DESCRIPTION] IS NULL) OR ([CATEGORY_DESCRIPTION] = @Original_CATEGORY_DESCRIPTION)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CATEGORY_CODE", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY_CODE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CATEGORY_NAME", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY_NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CATEGORY_PARENT_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY_PARENT_ID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CATEGORY_PARENT_ID", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "CATEGORY_PARENT_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DISPLAY_ORDER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISPLAY_ORDER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DISPLAY_ORDER", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 4, 0, "DISPLAY_ORDER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DISPLAY_LEVEL", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISPLAY_LEVEL", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DISPLAY_LEVEL", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 4, 0, "DISPLAY_LEVEL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CATEGORY_DESCRIPTION", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY_DESCRIPTION", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CATEGORY_DESCRIPTION", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY_DESCRIPTION", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[DM_CATEGORY] ([CATEGORY_CODE], [CATEGORY_NAME], [CATEGORY_PARENT_ID], [DISPLAY_ORDER], [DISPLAY_LEVEL], [CATEGORY_DESCRIPTION]) VALUES (@CATEGORY_CODE, @CATEGORY_NAME, @CATEGORY_PARENT_ID, @DISPLAY_ORDER, @DISPLAY_LEVEL, @CATEGORY_DESCRIPTION);
SELECT ID, CATEGORY_CODE, CATEGORY_NAME, CATEGORY_PARENT_ID, DISPLAY_ORDER, DISPLAY_LEVEL, CATEGORY_DESCRIPTION FROM DM_CATEGORY WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CATEGORY_CODE", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY_CODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CATEGORY_NAME", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CATEGORY_PARENT_ID", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "CATEGORY_PARENT_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DISPLAY_ORDER", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 4, 0, "DISPLAY_ORDER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DISPLAY_LEVEL", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 4, 0, "DISPLAY_LEVEL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CATEGORY_DESCRIPTION", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY_DESCRIPTION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[DM_CATEGORY] SET [CATEGORY_CODE] = @CATEGORY_CODE, [CATEGORY_NAME] = @CATEGORY_NAME, [CATEGORY_PARENT_ID] = @CATEGORY_PARENT_ID, [DISPLAY_ORDER] = @DISPLAY_ORDER, [DISPLAY_LEVEL] = @DISPLAY_LEVEL, [CATEGORY_DESCRIPTION] = @CATEGORY_DESCRIPTION WHERE (([ID] = @Original_ID) AND ([CATEGORY_CODE] = @Original_CATEGORY_CODE) AND ([CATEGORY_NAME] = @Original_CATEGORY_NAME) AND ((@IsNull_CATEGORY_PARENT_ID = 1 AND [CATEGORY_PARENT_ID] IS NULL) OR ([CATEGORY_PARENT_ID] = @Original_CATEGORY_PARENT_ID)) AND ((@IsNull_DISPLAY_ORDER = 1 AND [DISPLAY_ORDER] IS NULL) OR ([DISPLAY_ORDER] = @Original_DISPLAY_ORDER)) AND ((@IsNull_DISPLAY_LEVEL = 1 AND [DISPLAY_LEVEL] IS NULL) OR ([DISPLAY_LEVEL] = @Original_DISPLAY_LEVEL)) AND ((@IsNull_CATEGORY_DESCRIPTION = 1 AND [CATEGORY_DESCRIPTION] IS NULL) OR ([CATEGORY_DESCRIPTION] = @Original_CATEGORY_DESCRIPTION)));
SELECT ID, CATEGORY_CODE, CATEGORY_NAME, CATEGORY_PARENT_ID, DISPLAY_ORDER, DISPLAY_LEVEL, CATEGORY_DESCRIPTION FROM DM_CATEGORY WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CATEGORY_CODE", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY_CODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CATEGORY_NAME", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CATEGORY_PARENT_ID", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "CATEGORY_PARENT_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DISPLAY_ORDER", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 4, 0, "DISPLAY_ORDER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DISPLAY_LEVEL", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 4, 0, "DISPLAY_LEVEL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CATEGORY_DESCRIPTION", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY_DESCRIPTION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CATEGORY_CODE", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY_CODE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CATEGORY_NAME", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY_NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CATEGORY_PARENT_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY_PARENT_ID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CATEGORY_PARENT_ID", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "CATEGORY_PARENT_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DISPLAY_ORDER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISPLAY_ORDER", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DISPLAY_ORDER", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 4, 0, "DISPLAY_ORDER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DISPLAY_LEVEL", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISPLAY_LEVEL", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DISPLAY_LEVEL", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 4, 0, "DISPLAY_LEVEL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CATEGORY_DESCRIPTION", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY_DESCRIPTION", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CATEGORY_DESCRIPTION", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY_DESCRIPTION", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 18, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SaleDS.Properties.Settings.Default.QuanLyBanHangConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, CATEGORY_CODE, CATEGORY_NAME, CATEGORY_PARENT_ID, DISPLAY_ORDER, DISPL" +
                "AY_LEVEL, CATEGORY_DESCRIPTION FROM dbo.DM_CATEGORY";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DS_DM_CATEGORY.DM_CATEGORYDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DS_DM_CATEGORY.DM_CATEGORYDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DS_DM_CATEGORY.DM_CATEGORYDataTable dataTable = new DS_DM_CATEGORY.DM_CATEGORYDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DS_DM_CATEGORY.DM_CATEGORYDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DS_DM_CATEGORY dataSet) {
            return this.Adapter.Update(dataSet, "DM_CATEGORY");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_ID, string Original_CATEGORY_CODE, string Original_CATEGORY_NAME, global::System.Nullable<decimal> Original_CATEGORY_PARENT_ID, global::System.Nullable<decimal> Original_DISPLAY_ORDER, global::System.Nullable<decimal> Original_DISPLAY_LEVEL, string Original_CATEGORY_DESCRIPTION) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_ID));
            if ((Original_CATEGORY_CODE == null)) {
                throw new global::System.ArgumentNullException("Original_CATEGORY_CODE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_CATEGORY_CODE));
            }
            if ((Original_CATEGORY_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_CATEGORY_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_CATEGORY_NAME));
            }
            if ((Original_CATEGORY_PARENT_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_CATEGORY_PARENT_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_DISPLAY_ORDER.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_DISPLAY_ORDER.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_DISPLAY_LEVEL.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_DISPLAY_LEVEL.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_CATEGORY_DESCRIPTION == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_CATEGORY_DESCRIPTION));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CATEGORY_CODE, string CATEGORY_NAME, global::System.Nullable<decimal> CATEGORY_PARENT_ID, global::System.Nullable<decimal> DISPLAY_ORDER, global::System.Nullable<decimal> DISPLAY_LEVEL, string CATEGORY_DESCRIPTION) {
            if ((CATEGORY_CODE == null)) {
                throw new global::System.ArgumentNullException("CATEGORY_CODE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CATEGORY_CODE));
            }
            if ((CATEGORY_NAME == null)) {
                throw new global::System.ArgumentNullException("CATEGORY_NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(CATEGORY_NAME));
            }
            if ((CATEGORY_PARENT_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(CATEGORY_PARENT_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((DISPLAY_ORDER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(DISPLAY_ORDER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((DISPLAY_LEVEL.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(DISPLAY_LEVEL.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((CATEGORY_DESCRIPTION == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(CATEGORY_DESCRIPTION));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CATEGORY_CODE, string CATEGORY_NAME, global::System.Nullable<decimal> CATEGORY_PARENT_ID, global::System.Nullable<decimal> DISPLAY_ORDER, global::System.Nullable<decimal> DISPLAY_LEVEL, string CATEGORY_DESCRIPTION, decimal Original_ID, string Original_CATEGORY_CODE, string Original_CATEGORY_NAME, global::System.Nullable<decimal> Original_CATEGORY_PARENT_ID, global::System.Nullable<decimal> Original_DISPLAY_ORDER, global::System.Nullable<decimal> Original_DISPLAY_LEVEL, string Original_CATEGORY_DESCRIPTION, decimal ID) {
            if ((CATEGORY_CODE == null)) {
                throw new global::System.ArgumentNullException("CATEGORY_CODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CATEGORY_CODE));
            }
            if ((CATEGORY_NAME == null)) {
                throw new global::System.ArgumentNullException("CATEGORY_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(CATEGORY_NAME));
            }
            if ((CATEGORY_PARENT_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(CATEGORY_PARENT_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((DISPLAY_ORDER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(DISPLAY_ORDER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((DISPLAY_LEVEL.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(DISPLAY_LEVEL.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((CATEGORY_DESCRIPTION == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(CATEGORY_DESCRIPTION));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Original_ID));
            if ((Original_CATEGORY_CODE == null)) {
                throw new global::System.ArgumentNullException("Original_CATEGORY_CODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_CATEGORY_CODE));
            }
            if ((Original_CATEGORY_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_CATEGORY_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_CATEGORY_NAME));
            }
            if ((Original_CATEGORY_PARENT_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(Original_CATEGORY_PARENT_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_DISPLAY_ORDER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(Original_DISPLAY_ORDER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_DISPLAY_LEVEL.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Original_DISPLAY_LEVEL.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_CATEGORY_DESCRIPTION == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_CATEGORY_DESCRIPTION));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CATEGORY_CODE, string CATEGORY_NAME, global::System.Nullable<decimal> CATEGORY_PARENT_ID, global::System.Nullable<decimal> DISPLAY_ORDER, global::System.Nullable<decimal> DISPLAY_LEVEL, string CATEGORY_DESCRIPTION, decimal Original_ID, string Original_CATEGORY_CODE, string Original_CATEGORY_NAME, global::System.Nullable<decimal> Original_CATEGORY_PARENT_ID, global::System.Nullable<decimal> Original_DISPLAY_ORDER, global::System.Nullable<decimal> Original_DISPLAY_LEVEL, string Original_CATEGORY_DESCRIPTION) {
            return this.Update(CATEGORY_CODE, CATEGORY_NAME, CATEGORY_PARENT_ID, DISPLAY_ORDER, DISPLAY_LEVEL, CATEGORY_DESCRIPTION, Original_ID, Original_CATEGORY_CODE, Original_CATEGORY_NAME, Original_CATEGORY_PARENT_ID, Original_DISPLAY_ORDER, Original_DISPLAY_LEVEL, Original_CATEGORY_DESCRIPTION, Original_ID);
        }
    }
}

#pragma warning restore 1591